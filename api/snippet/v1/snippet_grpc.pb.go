// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.2
// source: api/snippet/v1/snippet.proto

package snippet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Snippet_Query_FullMethodName  = "/api.router.v1.Snippet/Query"
	Snippet_Put_FullMethodName    = "/api.router.v1.Snippet/Put"
	Snippet_Delete_FullMethodName = "/api.router.v1.Snippet/Delete"
)

// SnippetClient is the client API for Snippet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnippetClient interface {
	Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Put(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type snippetClient struct {
	cc grpc.ClientConnInterface
}

func NewSnippetClient(cc grpc.ClientConnInterface) SnippetClient {
	return &snippetClient{cc}
}

func (c *snippetClient) Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Snippet_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetClient) Put(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Snippet_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetClient) Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Snippet_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnippetServer is the server API for Snippet service.
// All implementations must embed UnimplementedSnippetServer
// for forward compatibility.
type SnippetServer interface {
	Query(context.Context, *Request) (*Response, error)
	Put(context.Context, *Request) (*Response, error)
	Delete(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedSnippetServer()
}

// UnimplementedSnippetServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSnippetServer struct{}

func (UnimplementedSnippetServer) Query(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedSnippetServer) Put(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedSnippetServer) Delete(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSnippetServer) mustEmbedUnimplementedSnippetServer() {}
func (UnimplementedSnippetServer) testEmbeddedByValue()                 {}

// UnsafeSnippetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnippetServer will
// result in compilation errors.
type UnsafeSnippetServer interface {
	mustEmbedUnimplementedSnippetServer()
}

func RegisterSnippetServer(s grpc.ServiceRegistrar, srv SnippetServer) {
	// If the following call pancis, it indicates UnimplementedSnippetServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Snippet_ServiceDesc, srv)
}

func _Snippet_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Snippet_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetServer).Query(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippet_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Snippet_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetServer).Put(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippet_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Snippet_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetServer).Delete(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Snippet_ServiceDesc is the grpc.ServiceDesc for Snippet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Snippet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.router.v1.Snippet",
	HandlerType: (*SnippetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Snippet_Query_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Snippet_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Snippet_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/snippet/v1/snippet.proto",
}
